{
  "version": 3,
  "sources": ["../../@mnlphlp/plugin-blec/dist-js/index.js"],
  "sourcesContent": ["import { Channel, invoke } from '@tauri-apps/api/core';\n\n/**\n  * Scan for BLE devices\n  * @param handler - A function that will be called with an array of devices found during the scan\n  * @param timeout - The scan timeout in milliseconds\n*/\nasync function startScan(handler, timeout) {\n    if (!timeout) {\n        timeout = 10000;\n    }\n    let onDevices = new Channel();\n    onDevices.onmessage = handler;\n    await invoke('plugin:blec|scan', {\n        timeout,\n        onDevices\n    });\n}\n/**\n  * Stop scanning for BLE devices\n*/\nasync function stopScan() {\n    console.log('stop scan');\n    await invoke('plugin:blec|stop_scan');\n}\n/**\n  * Check if necessary permissions are granted\n  * @returns true if permissions are granted, false otherwise\n  */\nasync function checkPermissions() {\n    return await invoke('plugin:blec|check_permissions');\n}\n/**\n  * Register a handler to receive updates when the connection state changes\n*/\nasync function getConnectionUpdates(handler) {\n    let connection_chan = new Channel();\n    connection_chan.onmessage = handler;\n    await invoke('plugin:blec|connection_state', { update: connection_chan });\n}\n/**\n * Register a handler to receive updates when the scanning state changes\n */\nasync function getScanningUpdates(handler) {\n    let scanning_chan = new Channel();\n    scanning_chan.onmessage = handler;\n    await invoke('plugin:blec|scanning_state', { update: scanning_chan });\n}\n/**\n  * Disconnect from the currently connected device\n*/\nasync function disconnect() {\n    await invoke('plugin:blec|disconnect');\n}\n/**\n  * Connect to a BLE device\n  * @param address - The address of the device to connect to\n  * @param onDisconnect - A function that will be called when the device disconnects\n*/\nasync function connect(address, onDisconnect) {\n    console.log('connect', address);\n    let disconnectChannel = new Channel();\n    if (onDisconnect) {\n        disconnectChannel.onmessage = onDisconnect;\n    }\n    try {\n        await invoke('plugin:blec|connect', {\n            address: address,\n            onDisconnect: disconnectChannel\n        });\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/**\n * Write a Uint8Array to a BLE characteristic\n * @param characteristic UUID of the characteristic to write to\n * @param data Data to write to the characteristic\n */\nasync function send(characteristic, data, writeType = 'withResponse') {\n    await invoke('plugin:blec|send', {\n        characteristic,\n        data,\n        writeType,\n    });\n}\n/**\n * Write a string to a BLE characteristic\n * @param characteristic UUID of the characteristic to write to\n * @param data Data to write to the characteristic\n */\nasync function sendString(characteristic, data, writeType = 'withResponse') {\n    await invoke('plugin:blec|send_string', {\n        characteristic,\n        data,\n        writeType,\n    });\n}\n/**\n * Read bytes from a BLE characteristic\n * @param characteristic UUID of the characteristic to read from\n */\nasync function read(characteristic) {\n    let res = await invoke('plugin:blec|recv', {\n        characteristic\n    });\n    return res;\n}\n/**\n * Read a string from a BLE characteristic\n * @param characteristic UUID of the characteristic to read from\n */\nasync function readString(characteristic) {\n    let res = await invoke('plugin:blec|recv_string', {\n        characteristic\n    });\n    return res;\n}\n/**\n * Unsubscribe from a BLE characteristic\n * @param characteristic UUID of the characteristic to unsubscribe from\n */\nasync function unsubscribe(characteristic) {\n    await invoke('plugin:blec|unsubscribe', {\n        characteristic\n    });\n}\n/**\n * Subscribe to a BLE characteristic\n * @param characteristic UUID of the characteristic to subscribe to\n * @param handler Callback function that will be called with the data received for every notification\n */\nasync function subscribe(characteristic, handler) {\n    let onData = new Channel();\n    onData.onmessage = handler;\n    await invoke('plugin:blec|subscribe', {\n        characteristic,\n        onData\n    });\n}\n/**\n * Subscribe to a BLE characteristic. Converts the received data to a string\n * @param characteristic UUID of the characteristic to subscribe to\n * @param handler Callback function that will be called with the data received for every notification\n */\nasync function subscribeString(characteristic, handler) {\n    let onData = new Channel();\n    onData.onmessage = handler;\n    await invoke('plugin:blec|subscribe_string', {\n        characteristic,\n        onData\n    });\n}\n\nexport { checkPermissions, connect, disconnect, getConnectionUpdates, getScanningUpdates, read, readString, send, sendString, startScan, stopScan, subscribe, subscribeString, unsubscribe };\n"],
  "mappings": ";;;;;;;AAOA,eAAe,UAAU,SAAS,SAAS;AACvC,MAAI,CAAC,SAAS;AACV,cAAU;AAAA,EACd;AACA,MAAI,YAAY,IAAI,QAAQ;AAC5B,YAAU,YAAY;AACtB,QAAM,OAAO,oBAAoB;AAAA,IAC7B;AAAA,IACA;AAAA,EACJ,CAAC;AACL;AAIA,eAAe,WAAW;AACtB,UAAQ,IAAI,WAAW;AACvB,QAAM,OAAO,uBAAuB;AACxC;AAKA,eAAe,mBAAmB;AAC9B,SAAO,MAAM,OAAO,+BAA+B;AACvD;AAIA,eAAe,qBAAqB,SAAS;AACzC,MAAI,kBAAkB,IAAI,QAAQ;AAClC,kBAAgB,YAAY;AAC5B,QAAM,OAAO,gCAAgC,EAAE,QAAQ,gBAAgB,CAAC;AAC5E;AAIA,eAAe,mBAAmB,SAAS;AACvC,MAAI,gBAAgB,IAAI,QAAQ;AAChC,gBAAc,YAAY;AAC1B,QAAM,OAAO,8BAA8B,EAAE,QAAQ,cAAc,CAAC;AACxE;AAIA,eAAe,aAAa;AACxB,QAAM,OAAO,wBAAwB;AACzC;AAMA,eAAe,QAAQ,SAAS,cAAc;AAC1C,UAAQ,IAAI,WAAW,OAAO;AAC9B,MAAI,oBAAoB,IAAI,QAAQ;AACpC,MAAI,cAAc;AACd,sBAAkB,YAAY;AAAA,EAClC;AACA,MAAI;AACA,UAAM,OAAO,uBAAuB;AAAA,MAChC;AAAA,MACA,cAAc;AAAA,IAClB,CAAC;AAAA,EACL,SACO,GAAG;AACN,YAAQ,MAAM,CAAC;AAAA,EACnB;AACJ;AAMA,eAAe,KAAK,gBAAgB,MAAM,YAAY,gBAAgB;AAClE,QAAM,OAAO,oBAAoB;AAAA,IAC7B;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACL;AAMA,eAAe,WAAW,gBAAgB,MAAM,YAAY,gBAAgB;AACxE,QAAM,OAAO,2BAA2B;AAAA,IACpC;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACL;AAKA,eAAe,KAAK,gBAAgB;AAChC,MAAI,MAAM,MAAM,OAAO,oBAAoB;AAAA,IACvC;AAAA,EACJ,CAAC;AACD,SAAO;AACX;AAKA,eAAe,WAAW,gBAAgB;AACtC,MAAI,MAAM,MAAM,OAAO,2BAA2B;AAAA,IAC9C;AAAA,EACJ,CAAC;AACD,SAAO;AACX;AAKA,eAAe,YAAY,gBAAgB;AACvC,QAAM,OAAO,2BAA2B;AAAA,IACpC;AAAA,EACJ,CAAC;AACL;AAMA,eAAe,UAAU,gBAAgB,SAAS;AAC9C,MAAI,SAAS,IAAI,QAAQ;AACzB,SAAO,YAAY;AACnB,QAAM,OAAO,yBAAyB;AAAA,IAClC;AAAA,IACA;AAAA,EACJ,CAAC;AACL;AAMA,eAAe,gBAAgB,gBAAgB,SAAS;AACpD,MAAI,SAAS,IAAI,QAAQ;AACzB,SAAO,YAAY;AACnB,QAAM,OAAO,gCAAgC;AAAA,IACzC;AAAA,IACA;AAAA,EACJ,CAAC;AACL;",
  "names": []
}
