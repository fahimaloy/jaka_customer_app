import {
  Channel,
  invoke
} from "./chunk-T4C3XZIL.js";
import "./chunk-PLDDJCW6.js";

// node_modules/@mnlphlp/plugin-blec/dist-js/index.js
async function startScan(handler, timeout) {
  if (!timeout) {
    timeout = 1e4;
  }
  let onDevices = new Channel();
  onDevices.onmessage = handler;
  await invoke("plugin:blec|scan", {
    timeout,
    onDevices
  });
}
async function stopScan() {
  console.log("stop scan");
  await invoke("plugin:blec|stop_scan");
}
async function checkPermissions() {
  return await invoke("plugin:blec|check_permissions");
}
async function getConnectionUpdates(handler) {
  let connection_chan = new Channel();
  connection_chan.onmessage = handler;
  await invoke("plugin:blec|connection_state", { update: connection_chan });
}
async function getScanningUpdates(handler) {
  let scanning_chan = new Channel();
  scanning_chan.onmessage = handler;
  await invoke("plugin:blec|scanning_state", { update: scanning_chan });
}
async function disconnect() {
  await invoke("plugin:blec|disconnect");
}
async function connect(address, onDisconnect) {
  console.log("connect", address);
  let disconnectChannel = new Channel();
  if (onDisconnect) {
    disconnectChannel.onmessage = onDisconnect;
  }
  try {
    await invoke("plugin:blec|connect", {
      address,
      onDisconnect: disconnectChannel
    });
  } catch (e) {
    console.error(e);
  }
}
async function send(characteristic, data, writeType = "withResponse") {
  await invoke("plugin:blec|send", {
    characteristic,
    data,
    writeType
  });
}
async function sendString(characteristic, data, writeType = "withResponse") {
  await invoke("plugin:blec|send_string", {
    characteristic,
    data,
    writeType
  });
}
async function read(characteristic) {
  let res = await invoke("plugin:blec|recv", {
    characteristic
  });
  return res;
}
async function readString(characteristic) {
  let res = await invoke("plugin:blec|recv_string", {
    characteristic
  });
  return res;
}
async function unsubscribe(characteristic) {
  await invoke("plugin:blec|unsubscribe", {
    characteristic
  });
}
async function subscribe(characteristic, handler) {
  let onData = new Channel();
  onData.onmessage = handler;
  await invoke("plugin:blec|subscribe", {
    characteristic,
    onData
  });
}
async function subscribeString(characteristic, handler) {
  let onData = new Channel();
  onData.onmessage = handler;
  await invoke("plugin:blec|subscribe_string", {
    characteristic,
    onData
  });
}
export {
  checkPermissions,
  connect,
  disconnect,
  getConnectionUpdates,
  getScanningUpdates,
  read,
  readString,
  send,
  sendString,
  startScan,
  stopScan,
  subscribe,
  subscribeString,
  unsubscribe
};
//# sourceMappingURL=@mnlphlp_plugin-blec.js.map
